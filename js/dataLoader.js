var loading=0;export async function loadData(t){try{await showLoadingAnimation();const n=await fetchWithRetry(t),o=await n.json();return await hideLoadingAnimation(),o}catch(t){throw console.error("データの読み込みに失敗しました:",t),t}}export async function loadAndMergeData(t,n,o,a=!1){try{await showLoadingAnimation();const[e,i]=await Promise.all([fetchWithRetry(t),fetchWithRetry(n)]),r=await e.json(),s=await i.json();return r.features=r.features.map(t=>{const n=t.properties[o],e=s[n]||{};return{...t,properties:a?{...t.properties,...e}:{...e,...t.properties}}}),await hideLoadingAnimation(),r}catch(t){throw console.error("データの読み込みまたは結合に失敗しました:",t),t}}async function fetchWithRetry(t,n=3,o=1e3){for(let a=0;a<n;a++)try{const n=await fetch(t);if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);return n}catch(t){if(!(a<n-1))throw t;console.warn(`Fetch failed, retrying... (${a+1}/${n})`),await new Promise(t=>setTimeout(t,o))}}async function showLoadingAnimation(){const t=document.getElementById("loading");t&&(loading++,t.style.display="block")}async function hideLoadingAnimation(){const t=document.getElementById("loading");t&&--loading<=0&&(t.style.display="none")}