import{updateBaseMap,addOverLayer,removeOverLayer}from"./common.js";export default class layersControl{constructor(e){this.layers=e.layers||{},this.defaultBaseLayer=e.defaultBaseLayer||null,this.layerTypes={base:{type:"radio",handler:this.handleBaseLayerChange.bind(this)},overlay:{type:"checkbox",handler:this.handleOverlayLayerChange.bind(this)},geojson:{type:"checkbox",handler:this.handleGeoJsonLayerChange.bind(this)}}}onAdd(e){return this.map=e,this.addLayersControl(),this.container}onRemove(){this.container.parentNode.removeChild(this.container),this.map=null}addLayersControl(){this.container=document.createElement("div"),this.container.className="maplibregl-ctrl maplibregl-ctrl-group",this.container.id="layers-control";const e=document.createElement("div");e.className="maplibregl-ctrl-layers-toggle",this.container.appendChild(e),this.container.addEventListener("mouseover",this.handleOver.bind(this)),this.container.addEventListener("mouseout",this.handleOut.bind(this));const t=document.createElement("i");t.className="fa-solid fa-layer-group fa-lg",e.appendChild(t);const a=document.createElement("div");a.className="maplibregl-ctrl-layers-list",this.container.appendChild(a),a.style.display="none",this.renderLayerGroups(a)}renderLayerGroups(e){const t={base:"ベースマップ",overlay:"オーバーレイ",geojson:"データレイヤー"};let a=0;["base","overlay","geojson"].forEach((n,r)=>{if(this.layers[n]&&Object.keys(this.layers[n]).length>0){if(a>0){const t=document.createElement("hr");e.appendChild(t)}const r=document.createElement("div");r.className="layer-group-header",r.textContent=t[n],r.style.cursor="pointer",r.setAttribute("data-group",n),e.appendChild(r);const s=document.createElement("div");s.className="layer-group-content",s.setAttribute("data-group",n),e.appendChild(s),r.addEventListener("click",()=>{this.toggleGroupVisibility(n)}),this.renderLayerGroup(s,n,this.layers[n]),a++}})}renderLayerGroup(e,t,a){Object.entries(a).forEach(([a,n])=>{const r=document.createElement("div");r.className="layer-item-container",this.createLayerControl(r,a,n,t),e.appendChild(r)})}createLayerControl(e,t,a,n){const r=this.layerTypes[n];if(!r)return;const s=document.createElement("div");s.className="layer-item";const l=document.createElement("input");l.setAttribute("type",r.type),l.id=t,l.name="base"===n?"mapStyle":n,this.setInitialState(l,t,a,n),s.appendChild(l);const i=document.createElement("label");if(i.htmlFor=t,i.textContent=a.name||t,s.appendChild(i),a.description){const e=document.createElement("div");e.className="layer-tooltip",e.textContent=a.description,s.appendChild(e)}s.addEventListener("click",e=>{e.target!==l&&("checkbox"===r.type?l.checked=!l.checked:l.checked=!0,l.dispatchEvent(new Event("change")),e.preventDefault())});const o=()=>{l.checked?s.classList.add("checked"):s.classList.remove("checked")};o(),l.addEventListener("change",e=>{o(),r.handler(t,a,e.target.checked)}),e.appendChild(s)}setInitialState(e,t,a,n){if("base"===n){const t=Number(a.id||a);null===this.defaultBaseLayer?(e.checked=!0,this.defaultBaseLayer=t,updateBaseMap(t)):t===this.defaultBaseLayer&&(e.checked=!0,updateBaseMap(t))}else{(a.visible||!1)&&(e.checked=!0,addOverLayer(t))}}handleBaseLayerChange(e,t,a){if(a){const a=Number(t.id||t);updateBaseMap(a),gtag("event","map_basemap_change",{event_category:"map",event_label:t.name||e,value:1})}}handleOverlayLayerChange(e,t,a){a?(addOverLayer(e),gtag("event","map_overlayer_change",{event_category:"map",event_label:t.name||e,value:1})):(removeOverLayer(e),gtag("event","map_overlayer_change",{event_category:"map",event_label:t.name||e,value:0}))}handleGeoJsonLayerChange(e,t,a){a?(addOverLayer(e),gtag("event","map_overlayer_change",{event_category:"map",event_label:t.name||e,value:1})):(removeOverLayer(e),gtag("event","map_overlayer_change",{event_category:"map",event_label:t.name||e,value:0}))}setLayerVisibility(e,t,a=[]){a.length>0?a.forEach(e=>{this.map.getLayer(e)&&this.map.setLayoutProperty(e,"visibility",t)}):this.map.getLayer(e)&&this.map.setLayoutProperty(e,"visibility",t)}toggleGroupVisibility(e){const t=this.container.querySelector(`.layer-group-content[data-group="${e}"]`),a=this.container.querySelector(`.layer-group-header[data-group="${e}"]`);if(t){t.classList.contains("collapsed")?(t.classList.remove("collapsed"),a.classList.remove("collapsed")):(t.classList.add("collapsed"),a.classList.add("collapsed"))}}handleOver(){this.container.childNodes[0].style.display="none";this.container.childNodes[1].style.display="block"}handleOut(){this.container.childNodes[1].style.display="none",this.container.childNodes[0].style.display="flex"}}